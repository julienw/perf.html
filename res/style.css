/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

html, body {
  margin: 0;
  padding: 0;
  font: message-box;
  font-size: 11px;
  height: 100%;
  /* background-color is defined in the HTML file to prevent flashing a white screen. */
}

body, #root, .profileViewer {
  display: flex;
  flex: 1;
}

.profileViewer {
  flex-flow: column nowrap;
}

:root {
  /* Photon animation curve */
  --animation-curve: cubic-bezier(.07,.95,0,1);
  color: var(--grey-90);
}

#root {
  z-index: 0;
}

.treeView {
  display: flex;
  flex-flow: column nowrap;
  flex: 1;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
  cursor: default;
  border-top: 1px solid var(--grey-30);
}

.treeViewHeader {
  padding: 1px 0;
  border-bottom: 1px solid var(--grey-30);
  position: relative;
  height: 16px;
  background: white;
}

.treeViewHeaderMainColumn {
  flex: 1;
}

.treeViewContextMenu {
  flex: 1;
  display: flex;
}

.treeViewBody {
  flex: 1;
  overflow: auto;
  position: relative;
  outline: 0;
  will-change: scroll-position;
  line-height: 16px;
  z-index: 0;
}

.treeViewBodyInnerWrapper {
  position: absolute;
  top: 0;
  left: 0;
  display: flex;
  flex-flow: row nowrap;
}

.treeViewBodyInner0 {
  left: 0;
  position: sticky;
  z-index: 2;
}

.treeViewBodyInner {
  background: white;
  overflow: hidden;
}

.treeViewRow {
  white-space: nowrap;
  display: flex;
  flex-flow: row nowrap;
  justify-content: flex-start;
  align-items: center;
}

.treeRowIcon {
  min-width: 14px;
  min-height: 14px;
  height: 100%;
  background: center / contain no-repeat;
}

.treeViewHeaderColumn {
  position: absolute;
  box-sizing: border-box;
  padding: 1px 5px;
  top: 0;
  bottom: 0;
  line-height: 15px;
  white-space: nowrap;
}
.treeViewHeaderColumn.treeViewFixedColumn::after {
  content: '';
  position: absolute;
  top: 3px;
  right: 0;
  bottom: 3px;
  width: 1px;
  background: #E5E5E5;
}
.treeViewHeaderColumn.totalTime,
.treeViewHeaderColumn.selfTime {
  text-align: right;
}
.treeViewRowColumn.treeViewFixedColumn {
  overflow: hidden;
  text-overflow: ellipsis;

  box-sizing: border-box;
  border-right: 1px solid var(--grey-30);
}
.treeViewFixedColumn.totalTime {
  left: 0px;
  width: 70px;
}
.treeViewFixedColumn.totalTimePercent {
  left: 70px;
  width: 50px;
  border-right: none;
}
.treeViewFixedColumn.selfTime {
  left: 120px;
  width: 70px;
}
.treeViewHeaderColumn.totalTime {
  width: 120px;
}
.treeViewFixedColumn.icon {
  left: 190px;
  width: 19px;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
}
.treeViewRowColumn.totalTime,
.treeViewRowColumn.totalTimePercent,
.treeViewRowColumn.selfTime,
.treeViewRowColumn.timestamp {
  text-align: right;
  padding-right: 5px;
}
.treeViewRowColumn.category {
  text-align: left;
  padding-left: 5px;
}

.treeRowIndentSpacer {
  flex-shrink: 0;
}

.treeViewAppendageColumn {
  margin-left: 10px;
  opacity: 0.6;
}

.treeViewRow.even {
  background-color: red;
}
.treeViewRow.odd {
  background-color: yellow;
}
.treeViewRow.selected {
  background-color: -moz-dialog;
  color: black;
}
.treeViewRow.dim > .treeViewMainColumn {
  opacity: 0.7
}
.treeViewBody:focus .treeViewRow.selected {
  background-color: highlight;
  color: highlighttext;
}

.treeViewHighlighting {
  /* This negative margin enlarges the background to the top, so that it fully
   * covers the underlying background. There's an underlying background when the
   * line is selected. */
  margin: -1px 0;
  padding: 1px 0;

  color: #000;
  background: #cbe8fe;
  border-radius: 2px;
  box-shadow: 0 0 0 0.5px rgba(0,0,0,0.05), 0 1px 1px rgba(0,0,0,.3);
}


.treeRowToggleButton,
.focusCallstackButton {
  background: none 0 0 no-repeat transparent;
  flex-shrink: 0;
  margin: 0;
  padding: 0;
  border: 0;
  width: 16px;
  height: 16px;
  overflow: hidden;
  color: transparent;
}

.treeRowToggleButton {
  background-image: url(./treetwisty.svg);
}

.focusCallstackButton {
  background-image: url(./circlearrow.svg);
  margin-left: 5px;
  visibility: hidden;
}

.treeRowToggleButton:active:hover,
.focusCallstackButton:active:hover {
  background-position: -16px 0;
}

.treeRowToggleButton.collapsed {
  background-position: 0 -16px;
}

.treeRowToggleButton.collapsed:active:hover {
  background-position: -16px -16px;
}

.treeViewBody:focus > * > * > * > .treeViewRow.selected > .treeRowToggleButton,
.treeViewBody:focus > * > * > * > .treeViewRow.selected > .focusCallstackButton {
  background-position: -32px 0;
}

.treeViewBody:focus > * > * > * > .treeViewRow.selected > .treeRowToggleButton.collapsed {
  background-position: -32px -16px;
}

.treeViewBody:focus > * > * > * > .treeViewRow.selected > .treeRowToggleButton:active:hover,
.treeViewBody:focus > * > * > * > .treeViewRow.selected > .focusCallstackButton:active:hover {
  background-position: -48px 0;
}

.treeViewBody:focus > * > * > * > .treeViewRow.selected > .treeRowToggleButton.collapsed:active:hover {
  background-position: -48px -16px;
}

.treeRowToggleButton.leaf {
  visibility: hidden;
}

.treeViewRow:hover > .focusCallstackButton {
  visibility: visible;
}

.profileViewerTopBar {
  height: 24px;
  margin: 0;
  padding: 0;
  display: flex;
  flex-flow: row nowrap;
  background: var(--grey-10);
  border-bottom: 1px solid var(--grey-30);
}

.profileFilterNavigator {
  height: 24px;
  flex: 1;
}

.profileViewerHeader {
  position: relative;
  margin-left: 149px;
  border-left: 1px solid var(--grey-30);
  -moz-user-focus: ignore;
}

.profileViewerHeaderTimeRuler {
  height: 20px;
  overflow: hidden;
}

.profileViewerHeaderTimeRuler::after {
  content: '';
  position: absolute;
  top: 20px;
  left: -150px;
  right: 0;
  height: 1px;
  background: var(--grey-30);
  z-index: 3;
}

.timeRulerContainer {
  overflow: hidden;
  list-style: none;
  margin: 0;
  padding: 0;
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  -moz-user-select: none;
  user-select: none;
  line-height: 20px;
  font-size: 9px;
  color: #888;
  cursor: default;
  z-index: 1; /* between .profileThreadHeaderBar background and .profileThreadHeaderBarThreadDetails */
}

.timeRulerNotch {
  display: block;
  position: absolute;
  top: 0;
  bottom: 0;
  width: 1px;
  margin-left: -1px;
  white-space: nowrap;
  text-align: right;
  background: linear-gradient(transparent, var(--grey-30) 19px, var(--grey-30) 20px, #d7d7db66 0);
}

.timeRulerNotchText {
  position: absolute;
  right: 0;
  padding-right: 5px;
}

.profileViewerHeaderOverflowEdgeIndicatorScrollbox {
  margin: 0 0 0 -150px;
  padding-left: 150px;
  max-height: 250px;
  overflow: auto;
}

.profileThreadHeaderBarIntervalMarkerOverviewContainerJank {
  border-bottom: 1px solid var(--grey-30);
}

.profileThreadHeaderBarIntervalMarkerOverview {
  list-style: none;
  display: block;
  margin: 0;
  height: 6px;
  position: relative;
  overflow: hidden;
  opacity: 0.75;
}

.profileThreadHeaderBarIntervalMarkerOverview.selected {
  opacity: 1;
}

.profileThreadHeaderBarIntervalMarkerOverviewThreadGeckoMain {
  height: 18px;
  /*border-bottom: 1px solid var(--grey-30);*/
}

.intervalMarkerTimelineCanvas {
  display: block;
  width: 100%;
  height: 100%;
}

.profileViewerHeaderThreadList {
  list-style: none;
  margin: 0 0 0 -150px;
  padding: 0;
  box-shadow: inset 0 1px var(--grey-30);
}

.profileThreadHeaderBarHidden {
  height: 0;
  pointer-events: none;
}

.profileThreadHeaderBar {
  margin: 0;
  padding: 0;
  display: flex;
  flex-flow: row nowrap;
  border-top: 1px solid var(--grey-30);
  box-shadow: 0 1px var(--grey-30);
}

.profileThreadHeaderBar.selected {
  background-color: #edf6ff;
}

.profileThreadHeaderBarThreadLabel {
  box-sizing: border-box;
  width: 150px;
  border-right: 1px solid var(--grey-30);
  padding-left: 14px;
  cursor: default;
  display: flex;
  flex-flow: row nowrap;
  align-items: center;
}

.profileThreadHeaderBarThreadName {
  font-weight: normal;
  font: message-box;
  font-size: 100%;
  margin: 0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
}

.profileThreadHeaderBarThreadDetails {
  flex: 1;
  position: relative;
  z-index: 1;
  display: flex;
  flex-flow: column nowrap;
}

.threadStackGraph {
  height: 25px;
}

.threadStackGraphCanvas {
  display: block;
  height: 25px;
  width: 100%;
}

.timeSelectionScrubberHoverIndicator {
  position: absolute;
  pointer-events: none;
  visibility: hidden;
  top: 0;
  bottom: 0;
  width: 1px;
  background: rgba(0,0,0,0.4);
  z-index: 1;
}

.profileViewerHeader:hover > .timeSelectionScrubberHoverIndicator {
  visibility: visible;
}

.overlay {
  position: absolute;
  z-index: 2;
  display: flex;
  flex-flow: row nowrap;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  margin-left: -5px;
  padding-left: 5px;
  overflow: hidden;
}

.dimmerBefore,
.dimmerAfter {
  background: rgba(12, 12, 13, .1);
  flex-shrink: 0;
}

.dimmerAfter {
  flex: 1;
}

.selectionScrubberGrippy {
  height: 20px;
  pointer-events: auto;
  display: flex;
  flex-flow: row nowrap;
}

.grippyRangeStart,
.grippyRangeEnd {
  width: 0px;
  padding: 3px;
  background: #AAA;
  border: 1px solid white;
  margin: 0 -4px;
  cursor: ew-resize;
  border-radius: 5px;
  position: relative;
  z-index: 3;
}

.grippyRangeStart:hover,
.grippyRangeStart.dragging,
.grippyRangeEnd:hover,
.grippyRangeEnd.dragging {
  background: #888;
}

.grippyMoveRange {
  flex: 1;
  cursor: -webkit-grab;
  cursor: grab;
}

.grippyMoveRange.dragging {
  cursor: -webkit-grabbing;
  cursor: grabbing;
}

.selectionScrubberWrapper {
  display: flex;
  flex-flow: column nowrap;
}

.selectionScrubberInner {
  flex: 1;
  justify-content: center;
  align-items: center;
  display: flex;
  min-width: 0;
  min-height: 0;
}

.selectionScrubberRange {
  top: 20px;
  position: absolute;
  padding: 4px 8px;
  color: #fff;
  background-color: var(--blue-50);
  border-radius: 0 0 4px 4px;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
  pointer-events: none;
  opacity: 1;
  transition: opacity 200ms;
}

.selectionScrubberRange.hidden {
  opacity: 0;
}

.selectionScrubberZoomButton {
  width: 30px;
  height: 30px;
  pointer-events: auto;
  box-sizing: border-box;
  border-radius: 100%;
  margin: -15px;
  position: relative;
  border: 1px solid rgba(0, 0, 0, 0.2);
  background: url(./zoom-icon.svg) center center no-repeat rgba(255, 255, 255, 0.6);
  transition: opacity 200ms ease-in-out;
  will-change: opacity;
  opacity: 0.5;
}

.selectionScrubberZoomButton.hidden {
  opacity: 0.0 !important;
  pointer-events: none;
  transition: unset;
}

.profileViewerHeader:hover .selectionScrubberZoomButton,
.selectionScrubberZoomButton:active {
  opacity: 1.0;
}

.selectionScrubberZoomButton:hover {
  background-color: rgba(255, 255, 255, 0.9);
}

.selectionScrubberZoomButton:active:hover {
  background-color: rgba(160, 160, 160, 0.6);
}

.tabBarContainer {
  display: flex;
  flex-flow: row nowrap;
  background: var(--grey-10);
  position: relative;
  border: solid var(--grey-30);
  border-width: 1px 0 1px;
}

.tabBarTabWrapper {
  margin: 0;
  padding: 0 0.5px;
  list-style: none;
  display: flex;
  flex-flow: row nowrap;
  margin: 0 -1px;
  max-width: 100%;
}

.tabBarTab {
  font-size: 12px;
  width: 8em;
  text-align: center;
  cursor: default;
  -moz-user-select: none;
  text-align: center;
  padding: 6px 4px;
  white-space: nowrap;
  background-clip: padding-box;
  transition: background-color 200ms, border-color 200ms;
  transition-timing-function: var(--animation-timing);
  position: relative;
  border: solid transparent;
  border-width: 0 1px 0 1px;
}
.tabBarTab.selected {
  background: #fff;
  color: var(--blue-60);
  border-color: var(--grey-30);
  /* Cut off the bottom of the border for the tab line. */
  top: 1px;
  padding-top: 5px;
}

/* Place the top tab bar in a separate element to avoid tapered corners. */
.tabBarTab::before {
  content: "";
  position:absolute;
  width: calc(100% + 2px);
  height: 2px;
  left: -1px;
  background-color: transparent;
  transition: background-color 200ms, border-color 200ms;
  transition-timing-function: var(--animation-timing);
  top: 0;
}

.tabBarTab.selected::before {
  /* The selected tab is shifted down a bit, so shift this bar back up a bit */
  top: -1px;
  background-color: var(--blue-50);
}
.tabBarTabWrapper:not(.beingReordered) > .tabBarTab:not(.selected):hover {
  background-color: var(--grey-20);
  border-color: var(--grey-20);
}
.tabBarTabWrapper:not(.beingReordered) > .tabBarTab:not(.selected):hover::before {
  background-color: var(--grey-40);
}

.treeViewFixedColumn.timestamp {
  left: 0px;
  width: 80px;
  border-right: none;
}
.treeViewFixedColumn.category {
  left: 80px;
  width: 70px;
}

.treeAndSidebarWrapper {
  flex: 1;
  display: flex;
  flex-flow: column nowrap;
}

.initializing {
  position: absolute;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  line-height:1.5;
}

.initializing-text {
  max-width: 50%;
  border: 1px solid #CCC;
  padding: 3em;
  font-size: 130%;
}

.initializing-text h1 {
  margin-top: 0;
  margin-bottom: 0.5em;
  padding-bottom: 0.5em;
  border-bottom: 1px solid #DDD;
}

.initializing-text span {
  background-color: #F6F6F6;
  border: 1px solid #CCC;
  border-radius: 0.2em;
  display:inline-block;
  padding: 0.0em 0.5em;
  box-shadow: 0.1em 0.1em 0 #BBB;
  margin: 0 0.2em;
}

.initializing-text li {
  margin: 1em 0;
}

.symbolicationStatusOverlay {
  position: fixed;
  top: -8px;
  padding-top: 8px;
  left: 30%;
  right: 30%;
  background: rgba(0,0,0,0.07);
  text-align: center;
  padding-left: 10px;
  padding-right: 10px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  height: 20px;
  line-height: 20px;
  border-radius: 0 0 5px 5px;
  transition: transform .2s ease-in-out, opacity .2s ease-in-out;
  box-shadow: 0 0 0 0.5px rgba(0,0,0,0.1), 0 2px 4px rgba(0,0,0,0.1);
  will-change: opacity, transform;
}

.symbolicationStatusOverlay.hidden {
  opacity: 0;
  transform: translateY(-30px);
}

.filler {
  animation-name: filler;
  animation-duration: 1s;
  animation-iteration-count: infinite;
}

@keyframes filler {
  0% { opacity: 1; animation-timing-function: ease-out; }
  50% { opacity: 0.5; animation-timing-function: ease-in-out; }
  100% { opacity: 1; animation-timing-function: ease-in; }
}

.react-contextmenu {
  min-width: 160px;
  padding: 5px 0;
  margin: 2px 0 0;
  font-size: 12px;
  color: #000;
  text-align: left;
  background-color: #fff;
  border-radius: 3px;
  display: none;
  box-shadow: 0 0 0 0.5px rgba(0, 0, 0, 0.1), 0 10px 12px rgba(0, 0, 0, 0.3);
  z-index: 4; /* needs to be on a higher level than .overflowEdgeIndicatorEdge */
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
}
.react-contextmenu-separator {
  border-bottom: 1px solid #ddd;
  margin: 6px 0;
}

.react-contextmenu.react-contextmenu--visible {
  display: block;
}

.react-contextmenu-item {
  padding: 2px 12px;
  line-height: 1.5;
  white-space: nowrap;
  cursor: default;
}

.react-contextmenu-item.react-contextmenu-item--active,
.react-contextmenu-item:hover {
  color: highlighttext;
  background-color: highlight;
  border-color: highlight;
  text-decoration: none;
}

.react-contextmenu-item.react-contextmenu-item--disabled,
.react-contextmenu-item.react-contextmenu-item--disabled:hover {
  color: #888;
  background-color: transparent;
}

.react-contextmenu-item--divider {
  margin-bottom: 3px;
  padding: 2px 0;
  border-bottom: 1px solid rgba(0,0,0,.15);
}

.react-contextmenu-item.react-contextmenu-submenu {
	padding: 0;
}

/* Submenu arrow */
.react-contextmenu-item.react-contextmenu-submenu > .react-contextmenu-item:after {
  position: absolute;
  right: 7px;
  width: 0;
  height: 0;
  border: 6px solid transparent;
  content: "";
  border-left-color: #000;
  top: 5px;
}

/* Submenu arrow highlighted color */
.react-contextmenu-item:hover.react-contextmenu-submenu > .react-contextmenu-item:after,
.react-contextmenu-item.react-contextmenu-submenu > .react-contextmenu-item--active:after {
  border-left-color: highlighttext;
}


.react-contextmenu-item.checkable {
  padding-left: 21px;
  position: relative;
}

.react-contextmenu-item.checked::before {
  content: '';
  display: block;
  position: absolute;
  left: 8px;
  top: 6px;
  width: 3px;
  height: 6px;
  border: solid #000;
  border-width: 0 2px 2px 0;
  transform: rotate(45deg);
}

.react-contextmenu-item.react-contextmenu-item--active.checked,
.react-contextmenu-item.checked:hover {
  border-color: #fff;
}
